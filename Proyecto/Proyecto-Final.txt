Proyecto:

1- Cargamos  el archivo para poder analizar que informacion contiene  
```{r}

library(plyr)
library(dplyr)
library(ggplot2)
library(corrplot)

dataO <- read.csv("train.csv")  

```

2. -Presentacion de los primeros registros
```{r}
head(dataO)

```

3-como hay un compo con id que indica el correlativo se procede a eleinar
```{r}
dataMA<-dataO[!(names(dataO)=="id")]

```


4- ahora hacemos un summary de el nuevo data s
```{r}

#str(dataMA)
summary(dataMA)

```

5-validamos las variables con valores nulos 

```{r}

#obtenemos los nombres de las columnas nulas 
colsNA <-colnames(dataMA)[!complete.cases(t(dataMA))]
#colsNA
colsNA



```

6-Validamos la cantidad de registros  
```{r}


#seleccionamos las data de las columnas nulas 
incompletData<-dataMA %>%
  select (colsNA) 
#contamos los valores nulos 
sum(is.na(incompletData))



```
7-Obtenemos los registros nulos 
```{r}
#obtenemos el % de los valores nulos 
porcentajeNA<-as.data.frame(apply(incompletData, MARGIN=2, function(col) mean(is.na(col))))
colnames(porcentajeNA)<-c("Porcentaje")
porcentajeNA


```

8- Como el % es muy bajo procedemos a ver como lo podemos remplazar

```{r}

dataMA$total_bedrooms_media<-ifelse(is.na(dataMA$total_bedrooms),
                               mean(dataMA$total_bedrooms, na.rm=TRUE ),
                               dataMA$total_bedrooms
                               ) 

dataMA$total_bedrooms_mediana<-ifelse(is.na(incompletData$total_bedrooms),
                               median(incompletData$total_bedrooms, na.rm=TRUE ),
                               incompletData$total_bedrooms
                                                        ) 

```

9- ahora procedemos a hacer una grafica para comparar como la densidad cambia  
```{r}

dataMA%>%
  ggplot(aes(x=total_bedrooms, y=..density..))+
  geom_density(color="blue", lwd=1)+
  geom_density(aes(x=total_bedrooms_media, y=..density..), color="red", lwd=1)+
  ##geom_density(aes(x=total_bedrooms_mediana, y=..density..), color="purple", lwd=1)+
  
theme_minimal()


```

```{r}


dataMA%>%
  ggplot(aes(x=total_bedrooms, y=..density..))+
  geom_density(color="blue", lwd=1)+
  geom_density(aes(x=total_bedrooms_mediana, y=..density..), color="red", lwd=1)+
  ##geom_density(aes(x=total_bedrooms_mediana, y=..density..), color="purple", lwd=1)+
  
theme_minimal()


```


10.  Luego de analizar se determino  que la imputacion por la media es la mejor por lo que se sustituye el valor.   
```{r}

dataMA$total_bedrooms = round(dataMA$total_bedrooms_media)

dataMA<-dataMA[!(names(dataMA)=="total_bedrooms_media")]
dataMA<-dataMA[!(names(dataMA)=="total_bedrooms_mediana")]
colsNA <-colnames(dataMA)[!complete.cases(t(dataMA))]
colsNA


```
11- si se ve la siguiente variable es categorica  

```{r}


head(dataMA$ocean_proximity)

```

11.-Ahora procedemos a modificar la variables categoricas 
```{r}

library(caret)

OHE <- dummyVars("~ .", data=dataMA)
dataMA <- data.frame(predict(OHE, newdata=dataMA))

```

12. -Ahora podemos ver las variables caterogicas  convertidas
```{r}

head(dataMA)

```

13. Ahora ver la correlacion de las variables 

```{r}

correlacion <-as.data.frame( round(cor(dataMA), 3))
correlacion[9]
```
14 -Validcion de outlier 
```{r}
#install.packages("gridExtra")
library(gridExtra)

detect_outliers<-function(df, colname){
  histPlot<-df %>%
    ggplot(aes_string(x=colname)) +
    geom_histogram(color='white', fill='blue', alpha=0.8)+
    theme_minimal()
  
  boxPlot<-df %>%
    ggplot(aes_string(y=colname))+
    geom_boxplot()+
    theme_minimal()
  
  qqPlot<-df %>%
    ggplot(aes_string(sample=colname))+
    stat_qq()+
    stat_qq_line(col="red", lwd=1)+
    theme_minimal()
  
  plotOut<-grid.arrange(histPlot, boxPlot, qqPlot, ncol=3) +
    theme(aspect.ratio = 5/50)
  
  return(plotOut)
}



```
15. se valida todos la variables  con outlier

```{r}
detect_outliers(dataMA, dataMA$longitude)
detect_outliers(dataMA, dataMA$latitude)
detect_outliers(dataMA, dataMA$housing_median_age)
detect_outliers(dataMA, dataMA$total_rooms)
detect_outliers(dataMA, dataMA$total_bedrooms)
detect_outliers(dataMA, dataMA$population)
detect_outliers(dataMA, dataMA$households)
detect_outliers(dataMA, dataMA$median_income)



```


16-Eliminacion de outlier 
```{r}


capping<-function(arr)
{
  #QA<- as.data.frame(quantile(dataMA$latitude))
  ls<-mean(arr) + ( 1.75* IQR(arr))
  li<-mean(arr) - ( 1.75* IQR(arr))
  arr<-ifelse (arr>=ls,ls,arr)
  arr<-ifelse (arr<=li,li,arr)
  return(arr)
}
dataMA$median_income<-capping(dataMA$median_income)


dataMA$longitude<-capping(dataMA$longitude)
dataMA$latitude<-capping(dataMA$latitude)
dataMA$housing_median_age<-capping(dataMA$housing_median_age)
dataMA$total_rooms<-capping(dataMA$total_rooms)
dataMA$total_bedrooms<-capping(dataMA$total_bedrooms)
dataMA$population<-capping(dataMA$population)
dataMA$households<-capping(dataMA$households)
dataMA$population<-capping(dataMA$population)


```


17 -Se valida nuevamente la correlacion  
```{r}
correlacion <-as.data.frame( round(cor(dataMA), 3))
correlacion[9]

  
```
18 - se realiza una grafica de correlacion  

```{r}

ggplot(dataMA, aes(x=longitude	, y=median_house_value))+
geom_point()
ggplot(dataMA, aes(x=latitude	, y=median_house_value))+
geom_point()

ggplot(dataMA, aes(x=housing_median_age	, y=median_house_value))+
geom_point()

ggplot(dataMA, aes(x=total_bedrooms	, y=median_house_value))+
geom_point()

ggplot(dataMA, aes(x=population	, y=median_house_value))+
geom_point()

ggplot(dataMA, aes(x=households	, y=median_house_value))+
geom_point()
ggplot(dataMA, aes(x=median_income	, y=median_house_value))+
geom_point()




```

19 - Modelo  1

```{r}

df <-dataMA %>%select (longitude, latitude, housing_median_age, total_rooms,  total_bedrooms, households, median_income, median_house_value , ocean_proximity..1H.OCEAN ,ocean_proximity.INLAND , ocean_proximity.NEAR.BAY     ,ocean_proximity.NEAR.OCEAN )


 set.seed(10)
  index <- sample(1:nrow(df), 0.8*nrow(df), replace = F)
  dataTrain <-df[index,]
  dataTest <-df[-index,]


modelo1<- dataTrain %>%
        lm(formula=median_house_value ~ longitude +latitude + housing_median_age+ total_rooms+
             total_bedrooms+households+ median_income+  median_house_value+ ocean_proximity..1H.OCEAN +ocean_proximity.INLAND + ocean_proximity.NEAR.BAY + ocean_proximity.NEAR.OCEAN)


predicts <- predict(object =  modelo1, newdata = dataTest)
RMSE <- sqrt(sum(((predicts- dataTest$median_house_value)^2)/nrow(dataTest)))
RMSE

      
summary(modelo1)


```
20 - Modelo  2

```{r}


modelo<- dataTrain %>%
        lm(formula=median_house_value ~ longitude +latitude + housing_median_age+ total_rooms+  total_bedrooms+ households+ median_income)

predicts <- predict(object =  modelo, newdata = dataTest)
RMSE <- sqrt(sum(((predicts- dataTest$median_house_value)^2)/nrow(dataTest)))
RMSE




```
21 - Modelo  3

```{r}

modelo<- dataTrain %>%
        lm(formula=median_house_value ~  latitude + housing_median_age+ total_rooms+  total_bedrooms+ median_income+  ocean_proximity..1H.OCEAN +ocean_proximity.INLAND + ocean_proximity.NEAR.BAY + ocean_proximity.NEAR.OCEAN)

predicts <- predict(object =  modelo, newdata = dataTest)
RMSE <- sqrt(sum(((predicts- dataTest$median_house_value)^2)/nrow(dataTest)))
RMSE




```


-22 - Modelo  4

```{r}

set.seed(90)
customControl<-trainControl(method = "repeatedcv", 
                            number=10,
                            repeats=25, 
                            verboseIter = F)


set.seed(1)
lasso<-train(median_house_value ~ longitude +latitude + housing_median_age+ total_rooms+  total_bedrooms+ households+ median_income+  ocean_proximity..1H.OCEAN +ocean_proximity.INLAND + ocean_proximity.NEAR.BAY + ocean_proximity.NEAR.OCEAN, 
             dataTrain, 
             method="glmnet",
             tuneGrid = expand.grid(alpha = seq(0,1,length=10),
                                    lambda=seq(0.0001, 1, length=5)),
             trControl=customControl)

predicts <- predict(object =  lasso, newdata = dataTest)
RMSE <- sqrt(sum(((predicts- dataTest$median_house_value)^2)/nrow(dataTest)))
RMSE

```

-23 -se procede a obtener el mejor  modelo y utilizarlo para obtener el resultado de las casas del archivo text.csv
```{r}


ds_test <- read.csv("test.csv")
ds <- ds_test%>% select (longitude, latitude, housing_median_age, total_rooms, total_bedrooms, households, median_income, ocean_proximity)


ds$total_bedrooms<-ifelse(is.na(ds$total_bedrooms),
                               mean(ds$total_bedrooms, na.rm=TRUE ),
                               ds$total_bedrooms
                               ) 


OHE <- dummyVars("~ .", data=ds)
ds <- data.frame(predict(OHE, newdata=ds))

ds$latitude<-capping(ds$latitude)
ds$longitude<-capping(ds$longitude)
ds$housing_median_age<-capping(ds$housing_median_age)
ds$total_rooms<-capping(ds$total_rooms)
ds$total_bedrooms<-capping(ds$total_bedrooms)
ds$households<-capping(ds$households)
ds$median_income<-capping(ds$median_income)



```

```{r}

predicts <- as.data.frame( predict(object =  modelo1, newdata = ds))
colnames(predicts)<-"median_house_value"
ResTest<-data.frame(ds_test$id)
colnames(ResTest)<-"id"
ResTest$median_house_value<-predicts$median_house_value
write.csv(ResTest,"test_respuesta--.csv")

```

